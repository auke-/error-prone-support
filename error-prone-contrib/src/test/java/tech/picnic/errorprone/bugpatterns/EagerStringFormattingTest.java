package tech.picnic.errorprone.bugpatterns;

import com.google.errorprone.BugCheckerRefactoringTestHelper;
import com.google.errorprone.BugCheckerRefactoringTestHelper.TestMode;
import com.google.errorprone.CompilationTestHelper;
import org.junit.jupiter.api.Test;

// XXX: Lots of test coverage still missing, which other tests are possibly redundant. Check with
// PIT.
final class EagerStringFormattingTest {
  @Test
  void identification() {
    CompilationTestHelper.newInstance(EagerStringFormatting.class, getClass())
        .addSourceLines(
            "A.java",
            "import static com.google.common.base.Preconditions.checkArgument;",
            "import static com.google.common.base.Preconditions.checkNotNull;",
            "import static com.google.common.base.Preconditions.checkState;",
            "import static com.google.common.base.Verify.verify;",
            "import static com.google.common.base.Verify.verifyNotNull;",
            "import static java.util.Objects.requireNonNull;",
            "",
            "import java.util.Locale;",
            "import org.slf4j.Logger;",
            "import org.slf4j.LoggerFactory;",
            "import org.slf4j.Marker;",
            "",
            "class A {",
            "  private static final Logger LOG = LoggerFactory.getLogger(A.class);",
            "",
            "  private int nonFinalField = 0;",
            "",
            "  void m() {",
            "    int effectivelyFinalLocal = 0;",
            "    /* A local variable that is also not effectively final. */",
            "    int nonFinalLocal = 0;",
            "    nonFinalLocal = 1;",
            "",
            "    String.format(\"%s\", \"foo\");",
            "    String.format(Locale.US, \"%s\", \"foo\");",
            "    \"%s\".formatted(\"foo\");",
            "    String.format(\"%s\", \"foo\", \"bar\");",
            "    String.format(\"%s %s\", \"foo\", \"bar\");",
            "    String.format(\"%s %s %%\", \"foo\", \"bar\");",
            "",
            "    System.out.println(String.format(\"%s\", nonFinalLocal));",
            "",
            "    requireNonNull(\"never-null\");",
            "    requireNonNull(String.format(\"Never-null format string: %s\", nonFinalLocal));",
            "    requireNonNull(\"never-null\", () -> String.format(\"Format string: %s\", nonFinalField));",
            "    // BUG: Diagnostic contains:",
            "    requireNonNull(\"never-null\", String.format(\"Format string: %s\", effectivelyFinalLocal));",
            "    // BUG: Diagnostic contains:",
            "    requireNonNull(",
            "        \"never-null\", String.format(\"Custom format string: %s, %d\", getClass(), nonFinalField));",
            "    // BUG: Diagnostic contains:",
            "    requireNonNull(\"never-null\", String.format(\"Format string: %s\", nonFinalLocal));",
            "",
            "    checkArgument(true);",
            "    checkNotNull(\"never-null\", \"Without format string\");",
            "    checkState(true, \"With format string: %s\", nonFinalLocal);",
            "    // BUG: Diagnostic contains:",
            "    verify(true, String.format(\"Vacuous format string\"));",
            "    // BUG: Diagnostic contains:",
            "    verifyNotNull(\"never-null\", String.format(\"Format string: %s\", nonFinalLocal));",
            "    // BUG: Diagnostic contains:",
            "    checkArgument(true, String.format(\"Custom format string: %d\", nonFinalLocal));",
            "    // BUG: Diagnostic contains:",
            "    checkNotNull(\"never-null\", String.format(\"Generated format string: %%s\"), nonFinalLocal);",
            "    // BUG: Diagnostic contains:",
            "    checkState(",
            "        true,",
            "        \"Format string with format string argument: %s\",",
            "        String.format(\"Format string argument: %s\", nonFinalLocal));",
            "",
            "    LOG.trace(\"Without format string\");",
            "    LOG.debug(\"With format string: {}\", nonFinalLocal);",
            "    LOG.info((Marker) null, \"With marker\");",
            "    LOG.warn((Marker) null, \"With marker and format string: {}\", nonFinalLocal);",
            "    LOG.error(\"With throwable\", new RuntimeException());",
            "    LOG.trace(\"With throwable and format string: {}\", nonFinalLocal, new RuntimeException());",
            "    LOG.debug((Marker) null, \"With marker and throwable\", new RuntimeException());",
            "    LOG.debug(",
            "        (Marker) null,",
            "        \"With marker, throwable and format string: {}\",",
            "        nonFinalLocal,",
            "        new RuntimeException());",
            "    // BUG: Diagnostic contains:",
            "    LOG.trace(String.format(\"Vacuous format string\"));",
            "    // BUG: Diagnostic contains:",
            "    LOG.trace(String.format(\"With format string: %s\", nonFinalLocal));",
            "    // BUG: Diagnostic contains:",
            "    LOG.trace((Marker) null, String.format(\"With marker and format string: %s\", nonFinalLocal));",
            "    // BUG: Diagnostic contains:",
            "    LOG.trace(",
            "        String.format(\"With throwable and format string: %s\", nonFinalLocal),",
            "        new RuntimeException());",
            "    // BUG: Diagnostic contains:",
            "    LOG.trace(",
            "        (Marker) null,",
            "        String.format(\"With marker, throwable and format string: %s\", nonFinalLocal),",
            "        new RuntimeException());",
            "    // BUG: Diagnostic contains:",
            "    LOG.trace(String.format(\"Generated format string: {}\"), nonFinalLocal);",
            "    // BUG: Diagnostic contains:",
            "    LOG.trace(",
            "        \"Format string with format string argument: {}\",",
            "        String.format(\"Format string argument: %s\", nonFinalLocal));",
            "  }",
            "}")
        .doTest();
  }

  @Test
  void replacement() {
    BugCheckerRefactoringTestHelper.newInstance(EagerStringFormatting.class, getClass())
        .addInputLines(
            "A.java",
            "import static com.google.common.base.Preconditions.checkArgument;",
            "import static com.google.common.base.Preconditions.checkNotNull;",
            "import static com.google.common.base.Preconditions.checkState;",
            "import static com.google.common.base.Verify.verify;",
            "import static com.google.common.base.Verify.verifyNotNull;",
            "import static java.util.Objects.requireNonNull;",
            "",
            "import org.slf4j.Logger;",
            "import org.slf4j.LoggerFactory;",
            "import org.slf4j.Marker;",
            "",
            "class A {",
            "  private static final Logger LOG = LoggerFactory.getLogger(A.class);",
            "",
            "  private int nonFinalField = 0;",
            "",
            "  void m() {",
            "    int effectivelyFinalLocal = 0;",
            "    /* A local variable that is also not effectively final. */",
            "    int nonFinalLocal = 0;",
            "    nonFinalLocal = 1;",
            "",
            "    requireNonNull(\"never-null\", String.format(\"Format string: %s\", effectivelyFinalLocal));",
            "    requireNonNull(",
            "        \"never-null\", String.format(\"Custom format string: %s, %d\", getClass(), nonFinalField));",
            "    requireNonNull(\"never-null\", String.format(\"Format string: %s\", nonFinalLocal));",
            "",
            "    verify(true, String.format(\"Vacuous format string: '\\\"%%\"));",
            "    verifyNotNull(\"never-null\", String.format(\"Format string: %s\", nonFinalLocal));",
            "    checkArgument(true, String.format(\"Custom format string: %d\", nonFinalLocal));",
            "    checkNotNull(\"never-null\", String.format(\"Generated format string: %%s\"), nonFinalLocal);",
            "    checkState(",
            "        true,",
            "        \"Format string with format string argument: %s\",",
            "        String.format(\"Format string argument: %s\", nonFinalLocal));",
            "",
            "    LOG.trace(String.format(\"Vacuous format string\"));",
            "    LOG.trace(String.format(\"With format string: %s\", nonFinalLocal));",
            "    LOG.trace((Marker) null, String.format(\"With marker and format string: %s\", nonFinalLocal));",
            "    LOG.trace(",
            "        String.format(\"With throwable and format string: %s\", nonFinalLocal),",
            "        new RuntimeException());",
            "    LOG.trace(",
            "        (Marker) null,",
            "        String.format(\"With marker, throwable and format string: %s\", nonFinalLocal),",
            "        new RuntimeException());",
            "    LOG.trace(String.format(\"Generated format string: {}\"), nonFinalLocal);",
            "    LOG.trace(",
            "        \"Format string with format string argument: {}\",",
            "        String.format(\"Format string argument: %s\", nonFinalLocal));",
            "  }",
            "}")
        .addOutputLines(
            "A.java",
            "import static com.google.common.base.Preconditions.checkArgument;",
            "import static com.google.common.base.Preconditions.checkNotNull;",
            "import static com.google.common.base.Preconditions.checkState;",
            "import static com.google.common.base.Verify.verify;",
            "import static com.google.common.base.Verify.verifyNotNull;",
            "import static java.util.Objects.requireNonNull;",
            "",
            "import org.slf4j.Logger;",
            "import org.slf4j.LoggerFactory;",
            "import org.slf4j.Marker;",
            "",
            "class A {",
            "  private static final Logger LOG = LoggerFactory.getLogger(A.class);",
            "",
            "  private int nonFinalField = 0;",
            "",
            "  void m() {",
            "    int effectivelyFinalLocal = 0;",
            "    /* A local variable that is also not effectively final. */",
            "    int nonFinalLocal = 0;",
            "    nonFinalLocal = 1;",
            "",
            "    requireNonNull(\"never-null\", () -> String.format(\"Format string: %s\", effectivelyFinalLocal));",
            "    requireNonNull(",
            "        \"never-null\",",
            "        () -> String.format(\"Custom format string: %s, %d\", getClass(), nonFinalField));",
            "    requireNonNull(\"never-null\", String.format(\"Format string: %s\", nonFinalLocal));",
            "",
            "    verify(true, \"Vacuous format string: '\\\"%\");",
            "    verifyNotNull(\"never-null\", \"Format string: %s\", nonFinalLocal);",
            "    checkArgument(true, String.format(\"Custom format string: %d\", nonFinalLocal));",
            "    checkNotNull(\"never-null\", String.format(\"Generated format string: %%s\"), nonFinalLocal);",
            "    checkState(",
            "        true,",
            "        \"Format string with format string argument: %s\",",
            "        String.format(\"Format string argument: %s\", nonFinalLocal));",
            "",
            "    LOG.trace(\"Vacuous format string\");",
            "    LOG.trace(\"With format string: {}\", nonFinalLocal);",
            "    LOG.trace((Marker) null, \"With marker and format string: {}\", nonFinalLocal);",
            "    LOG.trace(\"With throwable and format string: {}\", nonFinalLocal, new RuntimeException());",
            "    LOG.trace(",
            "        (Marker) null,",
            "        \"With marker, throwable and format string: {}\",",
            "        nonFinalLocal,",
            "        new RuntimeException());",
            "    LOG.trace(String.format(\"Generated format string: {}\"), nonFinalLocal);",
            "    LOG.trace(",
            "        \"Format string with format string argument: {}\",",
            "        String.format(\"Format string argument: %s\", nonFinalLocal));",
            "  }",
            "}")
        .doTest(TestMode.TEXT_MATCH);
  }
}
